//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input System/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Normal"",
            ""id"": ""029f1699-a785-4a4f-9c8c-0f94e9b25efb"",
            ""actions"": [
                {
                    ""name"": ""Mouse_Left_Hold"",
                    ""type"": ""Button"",
                    ""id"": ""a9d3a3ba-36e9-4487-ac8e-f5fe9cdde419"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Esc"",
                    ""type"": ""Button"",
                    ""id"": ""a741bc25-e283-4164-ad1e-265822d732e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""dd23e638-7144-40f8-83d8-3ccef8d21e5b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""9e13ad31-3919-48d1-a05b-ab5a6314fb87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4c212bcd-a9f5-47e9-b667-427aadb73de4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold(duration=1.401298E-45)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse_Left_Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79a50dc7-6ced-414f-8231-dd5a2be0a25d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b34e0719-6269-41b6-b520-5bd4103f023b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""966ebc21-dcef-4eef-9429-0128f3fc61ca"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Normal
        m_Normal = asset.FindActionMap("Normal", throwIfNotFound: true);
        m_Normal_Mouse_Left_Hold = m_Normal.FindAction("Mouse_Left_Hold", throwIfNotFound: true);
        m_Normal_Esc = m_Normal.FindAction("Esc", throwIfNotFound: true);
        m_Normal_MousePosition = m_Normal.FindAction("MousePosition", throwIfNotFound: true);
        m_Normal_Click = m_Normal.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Normal
    private readonly InputActionMap m_Normal;
    private INormalActions m_NormalActionsCallbackInterface;
    private readonly InputAction m_Normal_Mouse_Left_Hold;
    private readonly InputAction m_Normal_Esc;
    private readonly InputAction m_Normal_MousePosition;
    private readonly InputAction m_Normal_Click;
    public struct NormalActions
    {
        private @Input m_Wrapper;
        public NormalActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouse_Left_Hold => m_Wrapper.m_Normal_Mouse_Left_Hold;
        public InputAction @Esc => m_Wrapper.m_Normal_Esc;
        public InputAction @MousePosition => m_Wrapper.m_Normal_MousePosition;
        public InputAction @Click => m_Wrapper.m_Normal_Click;
        public InputActionMap Get() { return m_Wrapper.m_Normal; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NormalActions set) { return set.Get(); }
        public void SetCallbacks(INormalActions instance)
        {
            if (m_Wrapper.m_NormalActionsCallbackInterface != null)
            {
                @Mouse_Left_Hold.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnMouse_Left_Hold;
                @Mouse_Left_Hold.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnMouse_Left_Hold;
                @Mouse_Left_Hold.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnMouse_Left_Hold;
                @Esc.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnEsc;
                @Esc.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnEsc;
                @Esc.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnEsc;
                @MousePosition.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnMousePosition;
                @Click.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_NormalActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Mouse_Left_Hold.started += instance.OnMouse_Left_Hold;
                @Mouse_Left_Hold.performed += instance.OnMouse_Left_Hold;
                @Mouse_Left_Hold.canceled += instance.OnMouse_Left_Hold;
                @Esc.started += instance.OnEsc;
                @Esc.performed += instance.OnEsc;
                @Esc.canceled += instance.OnEsc;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public NormalActions @Normal => new NormalActions(this);
    public interface INormalActions
    {
        void OnMouse_Left_Hold(InputAction.CallbackContext context);
        void OnEsc(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
}
